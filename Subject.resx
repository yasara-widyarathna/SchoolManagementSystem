<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>